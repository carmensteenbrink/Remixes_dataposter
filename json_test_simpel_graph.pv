import json

size(1000, 1000)
background('#100', 'white', steps=[0,1], center=[0,1])
stroke (1)
font("Avenir", 12)
fill('white')

with open('nested_structure_from_35071.json', 'r') as inputFile:
    nestedData = json.load(inputFile)

# start position
x = WIDTH / 2
y = HEIGHT * 0.8

# def segment(x, y, x_direction, height, depth):
#     x2 = x + x_direction
#     y2 = y - height
#     line (x, y, x2, y2)
#     if depth > 0:
#         segment(x2, y2, -30, 30, depth - 1)
#         segment(x2, y2, 30, 30, depth - 1)
#     return (x2, y2)

# # play with 3rd and 4th argument
# segment(x, y, 0, 50, 10)

parentsPerGeneration = {}

def walkTree(data, depth):
    # draw lines towards the parents
    nParents = len(data['children'])
    # Add the parents to this generation
    k = "gen_" + str(depth) # k : key
    if parentsPerGeneration.has_key(k):
        parentsPerGeneration[k] += [d["id"] for d in data['children']]
    else:
        parentsPerGeneration[k] = [d["id"] for d in data['children']]
    for parent in data['children']:
        # If the depth is not reached,
        # call itself recursively for each parent
        if depth > 0:
            walkTree(parent, depth - 1)
            
            

def drawTree(x, y, data, depth):
    # draw the text
    text(data["id"], x, y, align=CENTER)
    # draw lines towards the parents
    nParents = len(data['children'])
    # Add the parents to this generation
    k = "gen_" + str(depth) # k : key
    if parentsPerGeneration.has_key(k):
        parentsPerGeneration[k] += [d["id"] for d in data['children']]
    else:
        parentsPerGeneration[k] = [d["id"] for d in data['children']]
    xspacing = 100 # 100 px spacing per parent
    width = (nParents - 1) * xspacing 
    newx = x - (width / 2)
    ymarginbottom = 25
    ymargintop = 15
    newy = y - 125 # 125px higher than last one
    for parent in data['children']:
        line(x, y - ymarginbottom, newx, newy + ymargintop)
        # If the depth is not reached,
        # call itself recursively for each parent
        if depth > 0:
            drawTree(newx, newy, parent, depth - 1)
        # give each parent some space in the x-direction
        newx += xspacing

def drawGenerations(x, y, data, depth):
    # draw the text
    text(data["track"], x, y, align=CENTER)
    # draw lines towards the parents
    k = "gen_" + str(depth) # k : key
    parentsInGen = parentsPerGeneration[k]
    nParents = len(parentsInGen)
    # Add the parents to this generation
    # if parentsPerGeneration.has_key(k):
    #     parentsPerGeneration[k] += [d["id"] for d in data['parents']]
    # else:
    #     parentsPerGeneration[k] = [d["id"] for d in data['parents']]
    xspacing = 100 # 100 px spacing per parent
    width = (nParents - 1) * xspacing 
    newx = x - (width / 2)
    ymarginbottom = 25
    ymargintop = 15
    newy = y - 125 # 125px higher than last one 
    for parent in data['children']:
        newnewy = newy - random(50)
        line(x, y - ymarginbottom, newx, newnewy + ymargintop)
        # If the depth is not reached,
        # call itself recursively for each parent
        if depth > 0:
            drawGenerations(newx, newnewy, parent, depth - 1)
        # give each parent some space in the x-direction
        newx += xspacing



# Call to draw the root of the tree
# (the rest of the branches will draw themselves)
walkTree(nestedData[0], 10)

print parentsPerGeneration
print "========"

for k in parentsPerGeneration.keys():
    parents = parentsPerGeneration[k]
    newParents = []
    for p in parents:
        if not p in newParents:
            newParents.append(p)
    parentsPerGeneration[k] = newParents
    

    
print parentsPerGeneration

drawGenerations(x, y, nestedData[0], 10)